# Generated by Django 5.2.3 on 2025-06-18

import django.core.validators
from django.db import migrations, models

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassicComic',
            fields=[
                ('comic_id', models.AutoField(primary_key=True, serialize=False)),
                ('story_title', models.CharField(max_length=255)),
                ('genre', models.CharField(max_length=100)),
                ('image', models.FileField(upload_to='comics/images/', validators=[django.core.validators.FileExtensionValidator(['png', 'jpeg'])])),
                ('description', models.TextField(blank=True)),
                ('average_rating', models.FloatField(default=0.0)),
                ('view_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uploader', models.ForeignKey(on_delete=models.CASCADE, to='cms.appuser')),
            ],
            options={
                'db_table': 'classic_comic',
            },
        ),
        migrations.CreateModel(
            name='ClassicEpisode',
            fields=[
                ('episode_id', models.AutoField(primary_key=True, serialize=False)),
                ('episode_title', models.CharField(max_length=255)),
                ('pdf_file', models.FileField(upload_to='comics/pdfs/', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('is_free', models.BooleanField(default=True)),
                ('is_unlocked', models.BooleanField(default=False)),
                ('comic', models.ForeignKey(on_delete=models.CASCADE, related_name='episodes', to='uploader.classiccomic')),
            ],
            options={
                'db_table': 'classic_episode',
            },
        ),
        migrations.CreateModel(
            name='ModernComic',
            fields=[
                ('motion_comic_id', models.AutoField(primary_key=True, serialize=False)),
                ('story_title', models.CharField(max_length=255)),
                ('genre', models.CharField(max_length=100)),
                ('image', models.FileField(upload_to='comics/images/', validators=[django.core.validators.FileExtensionValidator(['png', 'jpeg'])])),
                ('description', models.TextField(blank=True)),
                ('average_rating', models.FloatField(default=0.0)),
                ('view_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('uploader', models.ForeignKey(on_delete=models.CASCADE, to='cms.appuser')),
            ],
            options={
                'db_table': 'modern_comic',
            },
        ),
        migrations.CreateModel(
            name='ModernEpisode',
            fields=[
                ('episode_id', models.AutoField(primary_key=True, serialize=False)),
                ('episode_title', models.CharField(max_length=255)),
                ('video_file', models.FileField(upload_to='comics/videos/', validators=[django.core.validators.FileExtensionValidator(['mp4'])])),
                ('is_free', models.BooleanField(default=False)),
                ('is_unlocked', models.BooleanField(default=True)),
                ('comic', models.ForeignKey(on_delete=models.CASCADE, related_name='episodes', to='uploader.moderncomic')),
            ],
            options={
                'db_table': 'modern_episode',
            },
        ),
        migrations.CreateModel(
            name='ComicPage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('image_url', models.URLField(max_length=500)),
                ('text', models.TextField()),
                ('classic_episode', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, related_name='pages', to='uploader.classicepisode')),
                ('modern_episode', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, related_name='pages', to='uploader.modernepisode')),
            ],
            options={
                'db_table': 'comic_page',
            },
        ),
        migrations.CreateModel(
            name='SocialData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_liked', models.BooleanField(default=False)),
                ('like_count', models.IntegerField(default=0)),
                ('tags', models.JSONField(default=list)),
                ('comments', models.JSONField(default=list)),
                ('classic_comic', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, to='uploader.classiccomic')),
                ('classic_episode', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, to='uploader.classicepisode')),
                ('modern_comic', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, to='uploader.moderncomic')),
                ('modern_episode', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, to='uploader.modernepisode')),
                ('user', models.ForeignKey(on_delete=models.CASCADE, to='cms.appuser')),
            ],
            options={
                'db_table': 'social_data',
            },
        ),
        migrations.CreateModel(
            name='ComicInteraction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('viewed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('classic_comic', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, to='uploader.classiccomic')),
                ('modern_comic', models.ForeignKey(blank=True, null=True, on_delete=models.CASCADE, to='uploader.moderncomic')),
                ('user', models.ForeignKey(on_delete=models.CASCADE, to='cms.appuser')),
            ],
            options={
                'db_table': 'comic_interaction',
                'constraints': [
                    models.CheckConstraint(
                        check=~models.Q(classic_comic__isnull=True, modern_comic__isnull=True) & ~models.Q(classic_comic__isnull=False, modern_comic__isnull=False),
                        name='one_comic_only'
                    ),
                ],
            },
        ),
    ]